# -*- coding: utf-8 -*-
"""7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dGj6Ar4isfDQARrkUd2fiLjxqi0hpprr
"""

import re

def process_command(command, array):
    """Обрабатывает команды для работы с массивом."""

    if not isinstance(array, list):
        raise ValueError("Второй аргумент должен быть массивом (списком).")

    # Регулярные выражения для распознавания команд
    patterns = {
        "index": r"^Получить элемент по (\d+) индексу$",
        "slice": r"^Получить элементы с (\d+) по (\d+) с шагом (\d+)$",
        "reverse_index": r"^Получить (\d+)-ый элемент с конца массива$"
    }

    # Проверка на соответствие формату "Получить элемент по n индексу"
    match = re.match(patterns["index"], command)
    if match:
        index = int(match.group(1))
        if 0 <= index < len(array):
            return array[index]
        else:
            raise IndexError("Индекс выходит за пределы массива.")

    # Проверка на соответствие формату "Получить элементы с n по b с шагом v"
    match = re.match(patterns["slice"], command)
    if match:
        start, stop, step = map(int, match.groups())
        if start < 0 or stop > len(array) or step <= 0:
            raise ValueError("Некорректные параметры для среза.")
        return array[start:stop:step]

    # Проверка на соответствие формату "Получить n-ый элемент с конца массива"
    match = re.match(patterns["reverse_index"], command)
    if match:
        reverse_index = int(match.group(1))
        if 0 < reverse_index <= len(array):
            return array[-reverse_index]
        else:
            raise IndexError("Индекс с конца выходит за пределы массива.")

    # Если команда не распознана
    raise ValueError(f"Команда не соответствует ожидаемому формату: {command}")

# Примеры вызова
some_array = [10, 20, 30, 40, 50, 60, 70]

# Получить элемент по индексу
print(process_command("Получить элемент по 2 индексу", some_array))  # Вывод: 30

# Получить элементы срезом
print(process_command("Получить элементы с 1 по 5 с шагом 2", some_array))  # Вывод: [20, 40]

# Получить элемент с конца
print(process_command("Получить 3-ый элемент с конца массива", some_array))  # Вывод: 50